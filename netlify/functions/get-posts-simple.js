exports.handler = async (event, context) => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ GitHub API...');
    
    const owner = 'Vladislav9111';
    const repo = 'flamingoauto-site';
    const path = 'content/blog';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ content/blog
    const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`);
    
    if (!response.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ GitHub API:', response.status);
      return {
        statusCode: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify([]),
      };
    }

    const files = await response.json();
    const mdFiles = files.filter(file => file.name.endsWith('.md'));
    console.log('üìù –ù–∞–π–¥–µ–Ω–æ .md —Ñ–∞–π–ª–æ–≤:', mdFiles.length);

    const posts = [];

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for (const file of mdFiles) {
      try {
        const fileResponse = await fetch(file.download_url);
        const content = await fileResponse.text();
        
        // –ü–∞—Ä—Å–∏–º frontmatter
        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
        
        if (!frontmatterMatch) {
          console.log('‚ö†Ô∏è –§–∞–π–ª –±–µ–∑ frontmatter:', file.name);
          continue;
        }

        const frontmatterText = frontmatterMatch[1];
        const bodyContent = frontmatterMatch[2];
        
        // –ü–∞—Ä—Å–∏–º YAML frontmatter
        const frontmatter = {};
        frontmatterText.split('\n').forEach(line => {
          const match = line.match(/^(\w+):\s*"?([^"]*)"?$/);
          if (match) {
            const [, key, value] = match;
            frontmatter[key] = value.replace(/"/g, ''); // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
          }
        });

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
        const post = {
          id: file.name.replace('.md', ''),
          title: frontmatter.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          content: bodyContent.trim(),
          author: frontmatter.author || 'Flamingo Auto',
          date: frontmatter.date || new Date().toISOString(),
          locale: frontmatter.locale || frontmatter.lang || 'all',
          published: frontmatter.published !== 'false' && frontmatter.published !== false,
          excerpt: frontmatter.excerpt || ''
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        if (post.published) {
          posts.push(post);
        }

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', file.name, ':', error);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    posts.sort((a, b) => new Date(b.date) - new Date(a.date));

    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–æ–≤:', posts.length);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify(posts),
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ 
        error: error.message,
        stack: error.stack 
      }),
    };
  }
};