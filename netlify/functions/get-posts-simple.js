const fs = require('fs');
const path = require('path');

exports.handler = async (event, context) => {
  try {
    console.log('üîÑ –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤...');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏
    const possiblePaths = [
      path.join(process.cwd(), 'content', 'blog'),
      path.join(__dirname, '..', '..', 'content', 'blog'),
      path.join('/opt/build/repo', 'content', 'blog'),
      path.join('/var/task', 'content', 'blog'),
      path.join('/opt/buildhome/repo', 'content', 'blog'),
      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      path.join(process.env.LAMBDA_TASK_ROOT || '', '..', '..', 'content', 'blog'),
      path.join('/tmp', 'content', 'blog')
    ];

    console.log('üîç –ò—â–µ–º –ø–∞–ø–∫—É —Å –ø–æ—Å—Ç–∞–º–∏...');
    console.log('process.cwd():', process.cwd());
    console.log('__dirname:', __dirname);
    console.log('LAMBDA_TASK_ROOT:', process.env.LAMBDA_TASK_ROOT);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–Ω–µ
    try {
      const rootFiles = fs.readdirSync(process.cwd());
      console.log('üìÅ –§–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ:', rootFiles.slice(0, 10));
    } catch (e) {
      console.log('‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ—Ä–µ–Ω—å:', e.message);
    }

    let postsDirectory = null;
    for (const testPath of possiblePaths) {
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å:', testPath);
      if (fs.existsSync(testPath)) {
        postsDirectory = testPath;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞:', postsDirectory);
        break;
      }
    }

    if (!postsDirectory) {
      console.log('‚ùå –ü–∞–ø–∫–∞ —Å –ø–æ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return {
        statusCode: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify([]),
      };
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
    const files = fs.readdirSync(postsDirectory);
    console.log('üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:', files);
    
    const markdownFiles = files.filter(file => file.endsWith('.md'));
    console.log('üìù Markdown —Ñ–∞–π–ª—ã:', markdownFiles);
    console.log('üìÅ –ù–∞–π–¥–µ–Ω–æ .md —Ñ–∞–π–ª–æ–≤:', markdownFiles.length);

    const posts = markdownFiles.map(filename => {
      try {
        const filePath = path.join(postsDirectory, filename);
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ frontmatter –±–µ–∑ gray-matter
        const lines = content.split('\n');
        const frontmatter = {};
        let contentStart = 0;
        
        if (lines[0] === '---') {
          for (let i = 1; i < lines.length; i++) {
            if (lines[i] === '---') {
              contentStart = i + 1;
              break;
            }
            const line = lines[i];
            const colonIndex = line.indexOf(':');
            if (colonIndex > -1) {
              const key = line.substring(0, colonIndex).trim();
              let value = line.substring(colonIndex + 1).trim();
              // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
              if (value.startsWith('"') && value.endsWith('"')) {
                value = value.slice(1, -1);
              }
              frontmatter[key] = value;
            }
          }
        }
        
        const bodyContent = lines.slice(contentStart).join('\n');
        
        return {
          id: filename.replace('.md', ''),
          title: frontmatter.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          content: bodyContent || '',
          author: frontmatter.author || 'Flamingo Auto',
          date: frontmatter.date || new Date().toISOString(),
          locale: frontmatter.locale || frontmatter.lang || 'all',
          published: frontmatter.published !== 'false' && frontmatter.published !== false,
          excerpt: frontmatter.excerpt || ''
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞', filename, ':', error);
        return null;
      }
    }).filter(post => post && post.published);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    posts.sort((a, b) => new Date(b.date) - new Date(a.date));

    console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–æ–≤:', posts.length);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify(posts),
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ error: error.message }),
    };
  }
};