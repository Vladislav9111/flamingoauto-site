const fs = require('fs');
const path = require('path');

exports.handler = async (event, context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ error: 'Method not allowed' }),
    };
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Netlify Identity
    const authHeader = event.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return {
        statusCode: 401,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({ error: 'Unauthorized' }),
      };
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
    const postData = JSON.parse(event.body);
    const { title, content, author, locale, photos } = postData;

    if (!title || !content) {
      return {
        statusCode: 400,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({ error: 'Title and content are required' }),
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const date = new Date();
    const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD
    const slug = title.toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '')
      .replace(/\s+/g, '-')
      .substring(0, 50);
    const filename = `${dateStr}-${slug}.md`;

    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞
    const markdownContent = `---
title: "${title}"
date: ${date.toISOString()}
excerpt: "${title}"
author: "${author || 'Flamingo Auto'}"
locale: "${locale || 'all'}"
published: true
---

${content}`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –±–ª–æ–≥–∞
    const possiblePaths = [
      path.join(process.cwd(), 'content', 'blog'),
      path.join(__dirname, '..', '..', 'content', 'blog'),
      path.join('/opt/build/repo', 'content', 'blog'),
      path.join('/var/task', 'content', 'blog'),
      path.join('/opt/buildhome/repo', 'content', 'blog'),
      path.join(process.env.LAMBDA_TASK_ROOT || '', '..', '..', 'content', 'blog')
    ];

    let blogDirectory = null;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –ò—â–µ–º –ø–∞–ø–∫—É –±–ª–æ–≥–∞...');
    console.log('process.cwd():', process.cwd());
    console.log('__dirname:', __dirname);
    console.log('LAMBDA_TASK_ROOT:', process.env.LAMBDA_TASK_ROOT);
    
    for (const testPath of possiblePaths) {
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å:', testPath);
      console.log('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(path.dirname(testPath)));
      
      if (fs.existsSync(path.dirname(testPath))) {
        blogDirectory = testPath;
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(blogDirectory)) {
          console.log('–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É:', blogDirectory);
          fs.mkdirSync(blogDirectory, { recursive: true });
        }
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É:', blogDirectory);
        break;
      }
    }

    if (!blogDirectory) {
      console.error('Blog directory not found. Tried paths:', possiblePaths);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Git Gateway fallback
      return {
        statusCode: 202, // Accepted, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
        body: JSON.stringify({ 
          error: 'Blog directory not found',
          fallback: 'use_git_gateway',
          markdownContent: markdownContent,
          filename: filename
        }),
      };
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
    const filePath = path.join(blogDirectory, filename);
    fs.writeFileSync(filePath, markdownContent, 'utf8');

    console.log('‚úÖ Post created:', filePath);

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({
        success: true,
        message: 'Post created successfully',
        filename: filename,
        path: filePath
      }),
    };

  } catch (error) {
    console.error('‚ùå Error creating post:', error);
    return {
      statusCode: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({ 
        error: 'Failed to create post',
        details: error.message
      }),
    };
  }
};