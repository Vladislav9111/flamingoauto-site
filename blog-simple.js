// –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –±–ª–æ–≥–∞
const POSTS_STORAGE_KEY = 'flamingo_blog_posts';

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å—Ç–∞
function createPost(title, content, author, locale = 'all', photos = []) {
    return {
        id: Date.now().toString(),
        title: title.trim(),
        content: content.trim(),
        author: author.trim(),
        locale: locale,
        date: new Date().toISOString(),
        published: true,
        photos: photos || []
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ localStorage
function savePosts(posts) {
    try {
        localStorage.setItem(POSTS_STORAGE_KEY, JSON.stringify(posts));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ Netlify Function –∏–ª–∏ Git Gateway
async function saveToGitHub(post) {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GitHub...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω Netlify Identity
        if (!window.netlifyIdentity) {
            console.error('‚ùå Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            alert('–û—à–∏–±–∫–∞: Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
            return false;
        }
        
        const currentUser = window.netlifyIdentity.currentUser();
        if (!currentUser) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Netlify Identity');
            alert('–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Netlify Identity –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub.');
            return false;
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.email);
        const token = await currentUser.jwt();
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', token.length);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à—É Netlify Function
        try {
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Netlify Function...');
            const response = await fetch('/.netlify/functions/create-post', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: post.title,
                    content: post.content,
                    author: post.author,
                    locale: post.locale,
                    photos: post.photos
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Netlify Function:', result.filename);
                alert('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ GitHub!');
                return true;
            } else if (response.status === 202) {
                // Netlify Function –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª, –Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è Git Gateway
                const result = await response.json();
                console.log('‚ö†Ô∏è Netlify Function fallback:', result.error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å Git Gateway
            } else {
                const errorText = await response.text();
                console.error('‚ùå Netlify Function –æ—à–∏–±–∫–∞:', response.status, errorText);
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º Git Gateway...');
            }
        } catch (functionError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ Netlify Function:', functionError.message);
        }

        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é Netlify Function —á–µ—Ä–µ–∑ GitHub API
        try {
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ GitHub API...');
            const response = await fetch('/.netlify/functions/create-post-github', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: post.title,
                    content: post.content,
                    author: post.author,
                    locale: post.locale,
                    photos: post.photos
                })
            });

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ GitHub API Function:', result.filename);
                alert('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ GitHub API!');
                return true;
            } else {
                const errorText = await response.text();
                console.error('‚ùå GitHub API Function –æ—à–∏–±–∫–∞:', response.status, errorText);
            }
        } catch (githubError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ GitHub API Function:', githubError.message);
        }

        // Fallback –Ω–∞ Git Gateway
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Git Gateway...');
        
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const date = new Date(post.date);
        const dateStr = date.toISOString().split('T')[0]; // YYYY-MM-DD
        const slug = post.title.toLowerCase()
            .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '')
            .replace(/\s+/g, '-')
            .substring(0, 50);
        const filename = `${dateStr}-${slug}.md`;

        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ markdown —Ñ–∞–π–ª–∞
        const markdownContent = `---
title: "${post.title}"
date: ${post.date}
excerpt: "${post.title}"
author: "${post.author}"
locale: "${post.locale}"
published: true
---

${post.content}`;

        // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
        const encodedContent = btoa(encodeURIComponent(markdownContent).replace(/%([0-9A-F]{2})/g, function(match, p1) {
            return String.fromCharCode(parseInt(p1, 16));
        }));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub —á–µ—Ä–µ–∑ Netlify Git Gateway
        const apiUrl = `/.netlify/git/github/contents/content/blog/${filename}`;

        const response = await fetch(apiUrl, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/vnd.github.v3+json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                message: `–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: ${post.title}`,
                content: encodedContent,
                branch: 'main'
            })
        });

        if (response.ok) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Git Gateway');
            alert('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ Git Gateway!');
            return true;
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Git Gateway:', response.status, errorText);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (response.status === 401) {
                alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Netlify Identity –∏ Git Gateway.');
            } else if (response.status === 404) {
                alert('‚ùå Git Gateway –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Netlify.');
            } else {
                alert(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${response.status}. –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ.`);
            }
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ localStorage
function loadPosts() {
    try {
        const stored = localStorage.getItem(POSTS_STORAGE_KEY);
        return stored ? JSON.parse(stored) : [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ GitHub (—á–µ—Ä–µ–∑ Netlify Function)
async function loadPostsFromGitHub() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ GitHub...');

        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ Netlify Function
        const response = await fetch('/.netlify/functions/get-posts');
        if (response.ok) {
            const posts = await response.json();
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ GitHub:', posts.length, '–ø–æ—Å—Ç–æ–≤');

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            savePosts(posts);
            return posts;
        } else {
            console.log('‚ùå Netlify Function –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return [];
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub:', error);
        return [];
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ GitHub, fallback –Ω–∞ localStorage
async function syncPosts() {
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã...');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ GitHub
    const githubPosts = await loadPostsFromGitHub();

    if (githubPosts.length > 0) {
        console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å—Ç—ã –∏–∑ GitHub:', githubPosts.length);
        return githubPosts;
    }

    // –ï—Å–ª–∏ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
    const localPosts = loadPosts();
    console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã:', localPosts.length);
    return localPosts;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ GitHub)
async function addPost(title, content, author, locale = 'all', photos = []) {
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!');
        return false;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        const newPost = createPost(title, content, author, locale, photos);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const posts = loadPosts();
        posts.unshift(newPost);
        savePosts(posts);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
        const success = await saveToGitHub(newPost);

        if (success) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub');
            return true;
        } else {
            // –ï—Å–ª–∏ GitHub –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ localStorage
            console.warn('‚ö†Ô∏è GitHub —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            alert('‚ö†Ô∏è –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Netlify Identity –∏ Git Gateway.');
            return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∞–¥–º–∏–Ω–∫–µ
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ' + error.message);
        return false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
async function updatePost(postId, title, content, author, locale = 'all', photos = []) {
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!');
        return false;
    }

    try {
        const posts = loadPosts();
        const postIndex = posts.findIndex(p => p.id === postId);

        if (postIndex === -1) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ ID –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        const originalPost = posts[postIndex];
        const updatedPost = {
            ...originalPost,
            title: title.trim(),
            content: content.trim(),
            author: author.trim(),
            locale: locale,
            photos: photos || [],
            updatedAt: new Date().toISOString()
        };

        posts[postIndex] = updatedPost;
        savePosts(posts);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
        const success = await saveToGitHub(updatedPost);

        if (success) {
            return true;
        } else {
            console.warn('GitHub —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —Å—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ');
            return true;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ' + error.message);
        return false;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async function deletePost(postId) {
    try {
        const posts = loadPosts();
        const postIndex = posts.findIndex(p => p.id === postId);

        if (postIndex === -1) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ localStorage
        posts.splice(postIndex, 1);
        savePosts(posts);

        // TODO: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ GitHub (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        console.log('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ localStorage. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ GitHub –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.');

        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: ' + error.message);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π)
async function getPosts(locale = null) {
    const posts = await syncPosts();

    if (!locale) {
        return posts; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
    return posts.filter(post => {
        const postLocale = (post.locale || 'all').toLowerCase();
        return postLocale === 'all' || postLocale === locale.toLowerCase();
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
async function renderBlogPosts(containerId = 'posts-container', locale = null) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
        return;
    }

    console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞:', locale);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    container.innerHTML = '<p style="text-align:center;color:#666;padding:2rem;">üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏...</p>';

    const posts = await getPosts(locale);
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:', posts.length, '–¥–ª—è —è–∑—ã–∫–∞:', locale);
    console.log('üìù –ü–æ—Å—Ç—ã:', posts.map(p => ({ title: p.title, locale: p.locale })));

    if (posts.length === 0) {
        // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        const noPostsMessages = {
            'et': 'Artikleid pole veel avaldatud.',
            'ru': '–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.',
            'all': '–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.'
        };

        const message = noPostsMessages[locale] || noPostsMessages['all'];
        container.innerHTML = `<p style="text-align:center;color:#666;padding:2rem;">${message}</p>`;
        return;
    }

    const postsHTML = posts.map(post => `
        <article style="background:#fff;padding:1.5rem;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.1);margin-bottom:1rem;">
            <h2 style="margin:0 0 0.5rem 0;color:#333;">${escapeHtml(post.title)}</h2>
            <div style="color:#666;font-size:0.9rem;margin-bottom:1rem;">
                ${new Date(post.date).toLocaleDateString('ru-RU')} ‚Ä¢ ${escapeHtml(post.author)}
                ${post.updatedAt ? ` ‚Ä¢ <em>–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${new Date(post.updatedAt).toLocaleDateString('ru-RU')}</em>` : ''}
            </div>
            ${post.photos && post.photos.length > 0 ? `
                <div style="display:grid;grid-template-columns:${post.photos.length === 1 ? '1fr' : 'repeat(auto-fit,minmax(200px,1fr))'};gap:0.75rem;margin-bottom:1rem;">
                    ${post.photos.slice(0, 6).map(photo => `
                        <img src="${photo.dataUrl}" alt="${escapeHtml(photo.name)}"
                             style="width:100%;aspect-ratio:${post.photos.length === 1 ? '16/9' : '4/3'};object-fit:cover;border-radius:8px;cursor:pointer;transition:transform 0.2s ease,box-shadow 0.2s ease;"
                             onmouseover="this.style.transform='scale(1.02)';this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)'"
                             onmouseout="this.style.transform='scale(1)';this.style.boxShadow='none'"
                             onclick="window.open('${photo.dataUrl}', '_blank')">
                    `).join('')}
                </div>
            ` : ''}
            <div style="line-height:1.6;color:#444;">
                ${sanitizeHtml(post.content)}
            </div>
        </article>
    `).join('');

    container.innerHTML = postsHTML;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏)
function sanitizeHtml(html) {
    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏: b, i, strong, em, p, br
    const allowedTags = ['b', 'i', 'strong', 'em', 'p', 'br'];

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const temp = document.createElement('div');
    temp.innerHTML = html;

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    function cleanNode(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            return node.textContent;
        }

        if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();

            if (allowedTags.includes(tagName)) {
                const children = Array.from(node.childNodes).map(cleanNode).join('');
                return `<${tagName}>${children}</${tagName}>`;
            } else {
                // –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                return Array.from(node.childNodes).map(cleanNode).join('');
            }
        }

        return '';
    }

    return Array.from(temp.childNodes).map(cleanNode).join('').replace(/\n/g, '<br>');
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function getCurrentLocale() {
    const path = window.location.pathname.toLowerCase();
    if (path.includes('blog-et') || path.includes('index.html') || path.endsWith('/')) {
        return 'et';
    } else if (path.includes('blog-ru') || path.includes('ru.html')) {
        return 'ru';
    }
    return null; // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    const container = document.getElementById('posts-container');
    if (container) {
        const locale = getCurrentLocale();
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞:', locale);
        await renderBlogPosts('posts-container', locale);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
window.FlamingoBlogSimple = {
    addPost,
    updatePost,
    deletePost,
    getPosts,
    renderBlogPosts,
    getCurrentLocale,
    loadPosts,
    savePosts,
    loadPostsFromGitHub,
    syncPosts,
    sanitizeHtml,
    escapeHtml
};
