// –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–≥–∞ - —Ç–æ–ª—å–∫–æ Git Gateway
const POSTS_STORAGE_KEY = 'flamingo_blog_posts';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
function createPost(title, content, author, locale = 'all', photos = []) {
    return {
        id: Date.now().toString(),
        title: title.trim(),
        content: content.trim(),
        author: author.trim(),
        locale: locale,
        date: new Date().toISOString(),
        published: true,
        photos: photos || []
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function savePosts(posts) {
    try {
        localStorage.setItem(POSTS_STORAGE_KEY, JSON.stringify(posts));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
function loadPosts() {
    try {
        const stored = localStorage.getItem(POSTS_STORAGE_KEY);
        return stored ? JSON.parse(stored) : [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        return [];
    }
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ù–ê–î–Å–ñ–ù–´–ô –°–ü–û–°–û–ë - Git Gateway
async function saveToGitHub(post) {
    try {
        console.log('üîÑ –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ Git Gateway...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!window.netlifyIdentity || !window.netlifyIdentity.currentUser()) {
            alert('‚ùå –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Netlify Identity –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            return false;
        }

        const token = await window.netlifyIdentity.currentUser().jwt();
        
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const date = new Date(post.date);
        const dateStr = date.toISOString().split('T')[0];
        const slug = post.title.toLowerCase()
            .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '')
            .replace(/\s+/g, '-')
            .substring(0, 50);
        const filename = `${dateStr}-${slug}.md`;

        // –°–æ–∑–¥–∞–µ–º markdown
        const markdownContent = `---
title: "${post.title}"
date: ${post.date}
excerpt: "${post.title}"
author: "${post.author}"
locale: "${post.locale}"
published: true
---

${post.content}`;

        // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        const encodedContent = btoa(encodeURIComponent(markdownContent).replace(/%([0-9A-F]{2})/g, function(match, p1) {
            return String.fromCharCode(parseInt(p1, 16));
        }));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Git Gateway
        const response = await fetch(`/.netlify/git/github/contents/content/blog/${filename}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/vnd.github.v3+json'
            },
            body: JSON.stringify({
                message: `–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: ${post.title}`,
                content: encodedContent,
                branch: 'main'
            })
        });

        if (response.ok) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub');
            alert('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
            return true;
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞:', response.status, errorText);
            
            if (response.status === 401) {
                alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–∫–ª—é—á–∏—Ç–µ Git Gateway –≤ Netlify.');
            } else if (response.status === 404) {
                alert('‚ùå Git Gateway –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –≤ Netlify Dashboard ‚Üí Identity ‚Üí Git Gateway.');
            } else {
                alert(`‚ùå –û—à–∏–±–∫–∞ ${response.status}. –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ.`);
            }
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
        return false;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async function addPost(title, content, author, locale = 'all', photos = []) {
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!');
        return false;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        const newPost = createPost(title, content, author, locale, photos);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const posts = loadPosts();
        posts.unshift(newPost);
        savePosts(posts);

        // –ü—É–±–ª–∏–∫—É–µ–º –≤ GitHub
        const success = await saveToGitHub(newPost);
        
        if (success) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞');
            return true;
        } else {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            return true; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∞–¥–º–∏–Ω–∫–µ
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ GitHub
async function loadPostsFromGitHub() {
    try {
        const response = await fetch('/.netlify/functions/get-posts');
        if (response.ok) {
            const posts = await response.json();
            savePosts(posts); // –ö–µ—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            return posts;
        }
        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
async function getPosts(locale = null) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º GitHub, –ø–æ—Ç–æ–º localStorage
    let posts = await loadPostsFromGitHub();
    if (posts.length === 0) {
        posts = loadPosts();
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
    if (locale) {
        return posts.filter(post => {
            const postLocale = (post.locale || 'all').toLowerCase();
            return postLocale === 'all' || postLocale === locale.toLowerCase();
        });
    }
    
    return posts;
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.FlamingoBlogSimple = {
    addPost,
    getPosts,
    loadPosts,
    savePosts
};