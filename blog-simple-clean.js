// –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–ª–æ–≥–∞ - —Ç–æ–ª—å–∫–æ Git Gateway
const POSTS_STORAGE_KEY = 'flamingo_blog_posts';

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
function createPost(title, content, author, locale = 'all', photos = []) {
    return {
        id: Date.now().toString(),
        title: title.trim(),
        content: content.trim(),
        author: author.trim(),
        locale: locale,
        date: new Date().toISOString(),
        published: true,
        photos: photos || []
    };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function savePosts(posts) {
    try {
        localStorage.setItem(POSTS_STORAGE_KEY, JSON.stringify(posts));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
function loadPosts() {
    try {
        const stored = localStorage.getItem(POSTS_STORAGE_KEY);
        return stored ? JSON.parse(stored) : [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        return [];
    }
}

// –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ù–ê–î–Å–ñ–ù–´–ô –°–ü–û–°–û–ë - Git Gateway
async function saveToGitHub(post) {
    try {
        console.log('üîÑ –ü—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é —á–µ—Ä–µ–∑ Git Gateway...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (!window.netlifyIdentity) {
            console.error('‚ùå Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
            alert('‚ùå Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return false;
        }
        
        const currentUser = window.netlifyIdentity.currentUser();
        if (!currentUser) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            alert('‚ùå –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Netlify Identity –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π');
            return false;
        }
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', currentUser.email);

        const token = await currentUser.jwt();
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', token.length);
        
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const date = new Date(post.date);
        const dateStr = date.toISOString().split('T')[0];
        const slug = post.title.toLowerCase()
            .replace(/[^a-z–∞-—è—ë0-9\s]/gi, '')
            .replace(/\s+/g, '-')
            .substring(0, 50);
        const filename = `${dateStr}-${slug}.md`;
        console.log('üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª:', filename);

        // –°–æ–∑–¥–∞–µ–º markdown
        const markdownContent = `---
title: "${post.title}"
date: ${post.date}
excerpt: "${post.title}"
author: "${post.author}"
locale: "${post.locale}"
published: true
---

${post.content}`;

        // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        const encodedContent = btoa(encodeURIComponent(markdownContent).replace(/%([0-9A-F]{2})/g, function(match, p1) {
            return String.fromCharCode(parseInt(p1, 16));
        }));

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Git Gateway (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Netlify)
        console.log('üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Git Gateway...');
        const response = await fetch(`/.netlify/git/github/contents/content/blog/${filename}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/vnd.github.v3+json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                message: `–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: ${post.title}`,
                content: encodedContent,
                branch: 'main'
            })
        });

        if (response.ok) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub');
            alert('‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!');
            return true;
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞:', response.status, errorText);
            
            if (response.status === 401) {
                alert('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–∫–ª—é—á–∏—Ç–µ Git Gateway –≤ Netlify.');
            } else if (response.status === 404) {
                alert('‚ùå Git Gateway –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –≤ Netlify Dashboard ‚Üí Identity ‚Üí Git Gateway.');
            } else {
                alert(`‚ùå –û—à–∏–±–∫–∞ ${response.status}. –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ.`);
            }
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
        return false;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async function addPost(title, content, author, locale = 'all', photos = []) {
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!');
        return false;
    }

    try {
        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
        const newPost = createPost(title, content, author, locale, photos);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const posts = loadPosts();
        posts.unshift(newPost);
        savePosts(posts);

        // –ü—É–±–ª–∏–∫—É–µ–º –≤ GitHub
        const success = await saveToGitHub(newPost);
        
        if (success) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub');
            return true;
        } else {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç—å—è –ù–ï –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ GitHub, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ GitHub
async function loadPostsFromGitHub() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ Netlify Function...');
        const response = await fetch('/.netlify/functions/get-posts-simple');
        
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
        
        if (response.ok) {
            const posts = await response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å—Ç—ã –∏–∑ Netlify Function:', posts.length);
            savePosts(posts); // –ö–µ—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            return posts;
        } else {
            const errorText = await response.text();
            console.error('‚ùå –û—à–∏–±–∫–∞ Netlify Function:', response.status, errorText);
            return [];
        }
    } catch (error) {
        console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:', error);
        return [];
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
async function getPosts(locale = null) {
    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º GitHub, –ø–æ—Ç–æ–º localStorage
    let posts = await loadPostsFromGitHub();
    console.log('üìä –ò–∑ GitHub:', posts.length, '–ø–æ—Å—Ç–æ–≤');
    
    if (posts.length === 0) {
        posts = loadPosts();
        console.log('üì± –ò–∑ localStorage:', posts.length, '–ø–æ—Å—Ç–æ–≤');
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
    if (locale) {
        const filtered = posts.filter(post => {
            const postLocale = (post.locale || 'all').toLowerCase();
            return postLocale === 'all' || postLocale === locale.toLowerCase();
        });
        console.log('üåê –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —è–∑—ã–∫—É', locale + ':', filtered.length, '–ø–æ—Å—Ç–æ–≤');
        return filtered;
    }
    
    console.log('üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:', posts.length);
    return posts;
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async function deletePost(postId) {
    try {
        const posts = loadPosts();
        const postIndex = posts.findIndex(p => p.id === postId);

        if (postIndex === -1) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }

        posts.splice(postIndex, 1);
        savePosts(posts);
        console.log('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ localStorage');
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        return false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async function updatePost(postId, title, content, author, locale = 'all', photos = []) {
    if (!title || !content) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ!');
        return false;
    }

    try {
        const posts = loadPosts();
        const postIndex = posts.findIndex(p => p.id === postId);

        if (postIndex === -1) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return false;
        }

        const originalPost = posts[postIndex];
        const updatedPost = {
            ...originalPost,
            title: title.trim(),
            content: content.trim(),
            author: author.trim(),
            locale: locale,
            photos: photos || [],
            updatedAt: new Date().toISOString()
        };

        posts[postIndex] = updatedPost;
        savePosts(posts);

        // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ GitHub
        const success = await saveToGitHub(updatedPost);
        
        if (success) {
            console.log('‚úÖ –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
            return true;
        } else {
            console.warn('‚ö†Ô∏è –°—Ç–∞—Ç—å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
            return true;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
        return false;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–ª–æ–≥–∞
async function renderBlogPosts(containerId = 'posts-container', locale = null) {
    const container = document.getElementById(containerId);
    if (!container) {
        console.log('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', containerId);
        return;
    }

    console.log('üéØ –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Å—Ç—ã –¥–ª—è —è–∑—ã–∫–∞:', locale);
    container.innerHTML = '<p style="text-align:center;color:#666;padding:2rem;">üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏...</p>';

    const posts = await getPosts(locale);
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤:', posts.length);

    if (posts.length === 0) {
        const noPostsMessages = {
            'et': 'Artikleid pole veel avaldatud.',
            'ru': '–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.',
            'all': '–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.'
        };

        const message = noPostsMessages[locale] || noPostsMessages['all'];
        container.innerHTML = `<p style="text-align:center;color:#666;padding:2rem;">${message}</p>`;
        return;
    }

    const postsHTML = posts.map(post => `
        <article style="background:#fff;padding:1.5rem;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.1);margin-bottom:1rem;">
            <h2 style="margin:0 0 0.5rem 0;color:#333;">${escapeHtml(post.title)}</h2>
            <div style="color:#666;font-size:0.9rem;margin-bottom:1rem;">
                ${new Date(post.date).toLocaleDateString('ru-RU')} ‚Ä¢ ${escapeHtml(post.author)}
                ${post.updatedAt ? ` ‚Ä¢ <em>–æ–±–Ω–æ–≤–ª–µ–Ω–æ ${new Date(post.updatedAt).toLocaleDateString('ru-RU')}</em>` : ''}
            </div>
            <div style="line-height:1.6;color:#444;">
                ${sanitizeHtml(post.content.substring(0, 300) + (post.content.length > 300 ? '...' : ''))}
            </div>
        </article>
    `).join('');

    container.innerHTML = postsHTML;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function getCurrentLocale() {
    const path = window.location.pathname.toLowerCase();
    if (path.includes('blog-et')) {
        return 'et';
    } else if (path.includes('blog-ru')) {
        return 'ru';
    }
    return null;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML
function sanitizeHtml(html) {
    const allowedTags = ['b', 'i', 'strong', 'em', 'p', 'br'];
    const temp = document.createElement('div');
    temp.innerHTML = html;

    function cleanNode(node) {
        if (node.nodeType === Node.TEXT_NODE) {
            return node.textContent;
        }

        if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();
            if (allowedTags.includes(tagName)) {
                const children = Array.from(node.childNodes).map(cleanNode).join('');
                return `<${tagName}>${children}</${tagName}>`;
            } else {
                return Array.from(node.childNodes).map(cleanNode).join('');
            }
        }
        return '';
    }

    return Array.from(temp.childNodes).map(cleanNode).join('').replace(/\n/g, '<br>');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async function() {
    const container = document.getElementById('posts-container');
    if (container) {
        const locale = getCurrentLocale();
        console.log('–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —è–∑—ã–∫–∞:', locale);
        await renderBlogPosts('posts-container', locale);
    }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function diagnoseSystem() {
    console.log('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Netlify Identity
    if (!window.netlifyIdentity) {
        console.error('‚ùå Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
        return { success: false, error: 'Netlify Identity –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' };
    }
    
    const currentUser = window.netlifyIdentity.currentUser();
    if (!currentUser) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.email);
    
    try {
        const token = await currentUser.jwt();
        console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', token.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Git Gateway
        const testResponse = await fetch('/.netlify/git/github', {
            method: 'GET',
            headers: {
                'Authorization': `token ${token}`,
                'Accept': 'application/vnd.github.v3+json',
                'User-Agent': 'Netlify-Git-Gateway'
            }
        });
        
        console.log('üîó Git Gateway —Å—Ç–∞—Ç—É—Å:', testResponse.status);
        
        if (testResponse.status === 401) {
            return { success: false, error: 'Git Gateway –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' };
        } else if (testResponse.status === 404) {
            return { success: false, error: 'Git Gateway –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }
        
        return { success: true, message: '–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ' };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        return { success: false, error: error.message };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
window.FlamingoBlogSimple = {
    addPost,
    updatePost,
    deletePost,
    getPosts,
    renderBlogPosts,
    getCurrentLocale,
    loadPosts,
    savePosts,
    loadPostsFromGitHub,
    sanitizeHtml,
    escapeHtml,
    diagnoseSystem
};